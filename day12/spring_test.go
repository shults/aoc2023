package day12

import (
	"fmt"
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestSprings(t *testing.T) {
	tests := []struct {
		line         string
		arrangements int
	}{
		{"???.### 1,1,3", 1},
		{".??..??...?##. 1,1,3", 16384},
		{"?#?#?#?#?#?#?#? 1,3,1,6", 1},
		{"????.#...#... 4,1,1", 16},
		{"????.######..#####. 1,6,5", 2500},
		{"?###???????? 3,2,1", 506250},
	}

	for _, test := range tests {
		assert.Equal(t, test.arrangements, CalculateArrangementsPart2(test.line))
	}
}

func Test_calculateArrangementsPart2(t *testing.T) {

	tests := []struct {
		line         string
		arrangements int
	}{
		{"???.### 1,1,3", 1},
		{".??..??...?##. 1,1,3", 4},
		{"?#?#?#?#?#?#?#? 1,3,1,6", 1},
		{"????.#...#... 4,1,1", 1},
		{"????.######..#####. 1,6,5", 4},
		{"????.######..?????. 1,6,5", 4},
		{"?###???????? 3,2,1", 10},
		{"????? 1,1", 6},
		{"?????? 1,1", 10},
		{"??????? 1,1", 15},
		{"???????? 1,1", 21},
		{"????????? 1,1", 28},
		{"????????? 2,1", 21},
		{"????????? 3,1", 15},
		{"????????? 1,3", 15},

		{"????????? 2,2", 15},

		{"????#???? 2,2", 6},
		{"????????# 2,2", 5},

		//
		{".#???????????#.# 1,5,3,1", 3},
		{".#???????????#. 1,5,3,1", 1},
		{".#?????????????#. 1,5,3,1", 6},
		//{".?????????????. 5,3", 6},
		//{".?????????????#. 5,3", 6},
		//{".???????????###. 5,3", 6},
	}

	for _, test := range tests {
		assert.Equal(t, test.arrangements, CalculateArrangements(test.line))
	}
}

func TestAnalysis(t *testing.T) {

	line := ".#???????????#.# 1,5,3,1"
	line = "??.?????????#??? 3,4"
	line = ".??#???.???????? 1,2,1,5"
	line = "?????????#?# 1,1,7"

	for i := 0; i < 5; i++ {
		// CalculateArrangementsPart2parametrized(line, i+1)
		fmt.Printf("[%s] %d => %d (%d)\n", line, i+1, calculateArrangementsPart2(line, i+1), 0)
	}

	//[.#???????????#.# 1,5,3,1] 1 => 3
	//[.#???????????#.# 1,5,3,1] 2 => 10
	//[.#???????????#.# 1,5,3,1] 3 => 36
	//[.#???????????#.# 1,5,3,1] 4 => 136
	//[.#???????????#.# 1,5,3,1] 5 => 528
	//[.#???????????#.# 1,5,3,1] 6 => 2080
	//[.#???????????#.# 1,5,3,1] 7 => 8256
	//[.#???????????#.# 1,5,3,1] 8 => 32896

	//	=== RUN   TestAnalysis
	//[.#???????????#.# 1,5,3,1] 1 => 3
	//[.#???????????#.# 1,5,3,1] 2 => 10
	//[.#???????????#.# 1,5,3,1] 3 => 36
	//[.#???????????#.# 1,5,3,1] 4 => 136
	//[.#???????????#.# 1,5,3,1] 5 => 528
	//[.#???????????#.# 1,5,3,1] 6 => 2080
	//[.#???????????#.# 1,5,3,1] 7 => 8256
	//[.#???????????#.# 1,5,3,1] 8 => 32896
	//[.#???????????#.# 1,5,3,1] 9 => 131328

	//[??.?????????#??? 3,4] 1 => 18 (0)
	//[??.?????????#??? 3,4] 2 => 473 (0)
	//[??.?????????#??? 3,4] 3 => 13893 (0)

}

func Test_calculateArrangementsSplit(t *testing.T) {
	t.Skip()

	assert.Equal(t, 4, calculateArrangementsSplit("????.######..#####.", []int{1, 6, 5}))
	assert.Equal(t, 4, calculateArrangementsSplit("????.######..?????.", []int{1, 6, 5}))
	assert.Equal(t, 10, calculateArrangementsSplit("?###????????", []int{3, 2, 1}))
	t.Skip()

	tests := []struct {
		line         string
		arrangements int
	}{
		{"???.### 1,1,3", 1}, // 3
		{".??..??...?##. 1,1,3", 4},
		{"?#?#?#?#?#?#?#? 1,3,1,6", 1},
		{"????.#...#... 4,1,1", 1},
		{"????.######..#####. 1,6,5", 4},
		{"????.######..?????. 1,6,5", 4},
		{"?###???????? 3,2,1", 10},
	}

	for _, test := range tests {
		assert.Equal(t, test.arrangements, calculateArrangementsSplit(parseInput(test.line)))
	}
}

func TestDummy(t *testing.T) {
	tests := []struct {
		line         string
		arrangements int
	}{
		//{"?????????#?#??????????#?#??????????#?#??????????#?#??????????#?# 1,1,7,1,1,7,1,1,7,1,1,7,1,1,7", 4389},
		//{"?????????###??????????###??????????###??????????###??????####### 1,1,7,1,1,7,1,1,7,1,1,7,1,1,7", 4389},
		{"?????????###??????????###??????????###??????????###?????????### 1,1,7,1,1,7,1,1,7,1,1,7,1,1,7", 4389},
	}

	for _, test := range tests {
		assert.Equal(t, test.arrangements, CalculateArrangements(test.line))
	}
}

func calc(line string) int {
	//linePattern, matches := parseInput(line)
	//
	//patterns := strings.FieldsFunc(linePattern, func(r rune) bool {
	//	return r == '.'
	//})
	//
	//for _ := range patterns {
	//
	//}

	return -1
}

func TestDummy2(t *testing.T) {

	//{".??#???.???????? 1,2,1,5", 10},

	assert.Equal(t, 10, calc(".??#???.???????? 1,2,1,5"))
}
